<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BurntAI - Igniting Intelligence</title>
    <meta name="description" content="Leading the future of artificial intelligence with cutting-edge solutions and innovative technology.">
    
    <!-- Security Headers -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com">
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="X-Frame-Options" content="DENY">
    <meta http-equiv="X-XSS-Protection" content="1; mode=block">
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Share+Tech+Mono&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/arg-styles.css">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
 /* Add this CSS to your existing index.html */
        
        /* Secret Terminal Overlay */
        #secretTerminal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 99999;
            opacity: 0;
            transition: opacity 0.5s ease;
            backdrop-filter: blur(5px);
        }

        #secretTerminal.active {
            display: block;
            animation: terminalBoot 1s forwards;
        }

        @keyframes terminalBoot {
            0% {
                opacity: 0;
            }
            10% {
                opacity: 0.1;
                background: rgba(255, 133, 51, 0.1);
            }
            20% {
                opacity: 0.2;
                background: rgba(0, 229, 255, 0.1);
            }
            30% {
                opacity: 0.3;
                background: rgba(0, 0, 0, 0.95);
            }
            100% {
                opacity: 1;
            }
        }

        .terminal-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 900px;
            height: 80%;
            max-height: 600px;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0f0f 100%);
            border: 2px solid #ff8533;
            border-radius: 10px;
            box-shadow: 
                0 0 50px rgba(255, 133, 51, 0.5),
                inset 0 0 30px rgba(255, 133, 51, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            animation: terminalGlow 3s infinite alternate;
        }

        @keyframes terminalGlow {
            0% {
                box-shadow: 
                    0 0 50px rgba(255, 133, 51, 0.5),
                    inset 0 0 30px rgba(255, 133, 51, 0.1);
            }
            100% {
                box-shadow: 
                    0 0 80px rgba(255, 133, 51, 0.7),
                    inset 0 0 40px rgba(255, 133, 51, 0.2);
            }
        }

        .terminal-header {
            background: linear-gradient(90deg, rgba(255, 133, 51, 0.2), rgba(0, 229, 255, 0.2));
            border-bottom: 1px solid #ff8533;
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-family: 'Share Tech Mono', monospace;
        }

        .terminal-title {
            color: #ff8533;
            font-size: 14px;
            text-shadow: 0 0 10px rgba(255, 133, 51, 0.8);
            letter-spacing: 2px;
            animation: glitch 5s infinite;
        }

        @keyframes glitch {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(-1px, 1px); }
            40% { transform: translate(-1px, -1px); }
            60% { transform: translate(1px, 1px); }
            80% { transform: translate(1px, -1px); }
        }

        .terminal-controls {
            display: flex;
            gap: 10px;
        }

        .terminal-btn {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .terminal-btn.close {
            background: #ff4466;
            box-shadow: 0 0 10px rgba(255, 68, 102, 0.5);
        }

        .terminal-btn.close:hover {
            background: #ff6688;
            box-shadow: 0 0 20px rgba(255, 68, 102, 0.8);
        }

        .terminal-btn.minimize {
            background: #ffcc00;
            box-shadow: 0 0 10px rgba(255, 204, 0, 0.5);
        }

        .terminal-btn.maximize {
            background: #00ff88;
            box-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
        }

        .terminal-body {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            font-family: 'Share Tech Mono', monospace;
            font-size: 14px;
            color: #00ff88;
            position: relative;
        }

        .terminal-scanlines {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: repeating-linear-gradient(
                0deg,
                transparent,
                transparent 2px,
                rgba(0, 255, 136, 0.03) 2px,
                rgba(0, 255, 136, 0.03) 4px
            );
            pointer-events: none;
            animation: scanlines 8s linear infinite;
        }

        @keyframes scanlines {
            0% { transform: translateY(0); }
            100% { transform: translateY(10px); }
        }

        .terminal-output {
            min-height: 200px;
            margin-bottom: 20px;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .terminal-line {
            margin-bottom: 5px;
            animation: typeIn 0.1s ease;
        }

        @keyframes typeIn {
            from {
                opacity: 0;
                transform: translateX(-10px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .terminal-line.system {
            color: #ff8533;
            text-shadow: 0 0 5px rgba(255, 133, 51, 0.5);
        }

        .terminal-line.error {
            color: #ff4466;
            text-shadow: 0 0 5px rgba(255, 68, 102, 0.5);
        }

        .terminal-line.success {
            color: #00ff88;
            text-shadow: 0 0 5px rgba(0, 255, 136, 0.5);
        }

        .terminal-line.info {
            color: #00e5ff;
            text-shadow: 0 0 5px rgba(0, 229, 255, 0.5);
        }

        .terminal-line.warning {
            color: #ffcc00;
            text-shadow: 0 0 5px rgba(255, 204, 0, 0.5);
        }

        .terminal-input-container {
            display: flex;
            align-items: center;
            border-top: 1px solid rgba(255, 133, 51, 0.3);
            padding-top: 10px;
        }

        .terminal-prompt {
            color: #ff8533;
            margin-right: 10px;
            text-shadow: 0 0 5px rgba(255, 133, 51, 0.5);
        }

        .terminal-cursor {
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        .terminal-input-field {
            flex: 1;
            background: transparent;
            border: none;
            color: #00e5ff;
            font-family: 'Share Tech Mono', monospace;
            font-size: 14px;
            outline: none;
            text-shadow: 0 0 3px rgba(0, 229, 255, 0.5);
        }

        /* Authentication Modal */
        .auth-modal {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0f0f 100%);
            border: 2px solid #ff8533;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 0 50px rgba(255, 133, 51, 0.8);
            z-index: 100000;
        }

        .auth-modal.active {
            display: block;
            animation: authPulse 2s infinite;
        }

        @keyframes authPulse {
            0%, 100% {
                box-shadow: 0 0 50px rgba(255, 133, 51, 0.8);
            }
            50% {
                box-shadow: 0 0 80px rgba(255, 133, 51, 1);
            }
        }

        .auth-title {
            color: #ff8533;
            font-family: 'Orbitron', monospace;
            font-size: 20px;
            margin-bottom: 20px;
            text-align: center;
            text-shadow: 0 0 20px rgba(255, 133, 51, 0.8);
            letter-spacing: 3px;
        }

        .auth-input {
            width: 100%;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #00e5ff;
            color: #00e5ff;
            padding: 10px;
            margin-bottom: 15px;
            font-family: 'Share Tech Mono', monospace;
            outline: none;
            transition: all 0.3s ease;
        }

        .auth-input:focus {
            box-shadow: 0 0 15px rgba(0, 229, 255, 0.5);
            border-color: #00ff88;
        }

        .auth-submit {
            width: 100%;
            background: linear-gradient(45deg, #ff8533, #ff6b1a);
            border: none;
            color: #fff;
            padding: 12px;
            font-family: 'Orbitron', monospace;
            font-weight: bold;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 2px;
            transition: all 0.3s ease;
        }

        .auth-submit:hover {
            background: linear-gradient(45deg, #ff6b1a, #ff8533);
            box-shadow: 0 0 20px rgba(255, 133, 51, 0.8);
        }

        /* Matrix rain background for terminal */
        .matrix-rain {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            opacity: 0.05;
            overflow: hidden;
        }

        .matrix-drop {
            position: absolute;
            color: #00ff88;
            font-family: monospace;
            font-size: 10px;
            animation: matrixFall linear infinite;
        }

        @keyframes matrixFall {
            to {
                transform: translateY(100vh);
            }
        }

        /* Glitch text effect */
        .glitch-text {
            position: relative;
            animation: glitchText 2s infinite;
        }

        @keyframes glitchText {
            0%, 100% {
                text-shadow: 
                    0.05em 0 0 rgba(255, 0, 0, 0.75),
                    -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                    0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
            }
            14% {
                text-shadow: 
                    0.05em 0 0 rgba(255, 0, 0, 0.75),
                    -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                    0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
            }
            15% {
                text-shadow: 
                    -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                    0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                    -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
            }
            49% {
                text-shadow: 
                    -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                    0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                    -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
            }
            50% {
                text-shadow: 
                    0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                    0.05em 0 0 rgba(0, 255, 0, 0.75),
                    0 -0.05em 0 rgba(0, 0, 255, 0.75);
            }
            99% {
                text-shadow: 
                    0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                    0.05em 0 0 rgba(0, 255, 0, 0.75),
                    0 -0.05em 0 rgba(0, 0, 255, 0.75);
            }
        }
        :root {
            --neon-orange: #ff8533;
            --neon-cyan: #00e5ff;
            --neon-red: #ff4466;
            --burnt-orange: #ff6b1a;
            --dark-bg: #0a0a0a;
            --darker-bg: #050505;
            --terminal-green: #00ff88;
            --vault-blue: #0066cc;
            --rust-red: #cc4444;
            --text-primary: #e0e0e0;
            --text-secondary: #b0b0b0;
            --warning-yellow: #ffcc00;
        }

        body {
            background: linear-gradient(135deg, var(--dark-bg) 0%, var(--darker-bg) 100%);
            color: var(--text-primary);
            font-family: 'Orbitron', monospace;
            overflow-x: hidden;
            min-height: 100vh;
            position: relative;
        }

        /* Animated background particles */
        .bg-particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: var(--neon-orange);
            border-radius: 50%;
            animation: float 10s infinite linear;
            opacity: 0.3;
        }

        @keyframes float {
            0% { transform: translateY(100vh) translateX(0); opacity: 0; }
            10% { opacity: 0.3; }
            90% { opacity: 0.3; }
            100% { transform: translateY(-10vh) translateX(100px); opacity: 0; }
        }

        /* Glitch effect */
        .glitch {
            position: relative;
            animation: glitch 2s infinite;
        }

        @keyframes glitch {
            0%, 90%, 100% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(-2px, -2px); }
            60% { transform: translate(2px, 2px); }
            80% { transform: translate(2px, -2px); }
        }

        /* Header */
        header {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--neon-orange);
            z-index: 1000;
            padding: 1rem 2rem;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .logo {
            font-family: 'Share Tech Mono', monospace;
            font-size: 1.5rem;
            color: var(--neon-orange);
            text-shadow: 0 0 10px rgba(255, 133, 51, 0.5);
            font-weight: bold;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            color: var(--text-primary);
            text-decoration: none;
            font-family: 'Share Tech Mono', monospace;
            transition: all 0.3s ease;
            padding: 0.5rem 1rem;
            border: 1px solid transparent;
        }

        .nav-links a:hover {
            color: var(--neon-cyan);
            border-color: var(--neon-cyan);
            box-shadow: 0 0 15px rgba(0, 229, 255, 0.4);
            text-shadow: 0 0 10px rgba(0, 229, 255, 0.5);
        }

        /* Main Content */
        main {
            position: relative;
            z-index: 10;
            padding-top: 80px;
        }

        /* Hero Section - Tightened */
        .hero {
            min-height: 70vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            position: relative;
            background: radial-gradient(circle at center, rgba(255, 133, 51, 0.1) 0%, transparent 70%);
            padding: 2rem;
        }

        .hero h1 {
            font-size: clamp(3rem, 8vw, 7rem);
            font-weight: 900;
            color: var(--neon-orange);
            text-shadow: 0 0 20px rgba(255, 133, 51, 0.6), 0 0 40px rgba(255, 107, 26, 0.4);
            margin-bottom: 1rem;
            letter-spacing: 0.1em;
            animation: pulse 3s infinite alternate;
        }

        @keyframes pulse {
            0% { text-shadow: 0 0 20px rgba(255, 133, 51, 0.6), 0 0 40px rgba(255, 107, 26, 0.4); }
            100% { text-shadow: 0 0 30px rgba(255, 133, 51, 0.8), 0 0 60px rgba(255, 107, 26, 0.6), 0 0 80px rgba(204, 68, 68, 0.3); }
        }

        /* AI Quote Section */
        .ai-quote-container {
            margin: 1.5rem 0 2rem 0;
            max-width: 800px;
            padding: 0 2rem;
            position: relative;
        }

        .ai-quote {
            font-family: 'Share Tech Mono', monospace;
            font-size: clamp(1rem, 2.5vw, 1.4rem);
            color: var(--terminal-green);
            text-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
            line-height: 1.6;
            font-style: italic;
            opacity: 0;
            animation: fadeInGlitch 1s forwards;
            position: relative;
        }

        @keyframes fadeInGlitch {
            0% { 
                opacity: 0; 
                transform: translateY(20px);
                filter: blur(10px);
            }
            50% {
                opacity: 0.5;
                transform: translateY(10px) translateX(-2px);
                filter: blur(5px);
            }
            70% {
                opacity: 0.8;
                transform: translateY(5px) translateX(2px);
                filter: blur(2px);
            }
            100% { 
                opacity: 1; 
                transform: translateY(0);
                filter: blur(0);
            }
        }

        .quote-mark {
            color: var(--neon-cyan);
            font-size: 2rem;
            position: absolute;
            opacity: 0.3;
        }

        .quote-mark.left {
            top: -10px;
            left: -20px;
        }

        .quote-mark.right {
            bottom: -10px;
            right: -20px;
        }

        .hero-subtitle {
            font-size: clamp(0.9rem, 2.5vw, 1.6rem);
            color: var(--neon-cyan);
            font-family: 'Share Tech Mono', monospace;
            margin-bottom: 2rem;
            opacity: 0.9;
        }

        .cta-button {
            background: linear-gradient(45deg, var(--neon-orange), var(--rust-red));
            border: 2px solid var(--neon-orange);
            color: #ffffff;
            padding: 1rem 2rem;
            font-family: 'Orbitron', sans-serif;
            font-weight: bold;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            text-decoration: none;
            display: inline-block;
            position: relative;
            overflow: hidden;
        }

        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(255, 133, 51, 0.4);
            background: linear-gradient(45deg, var(--rust-red), var(--neon-red));
        }

        .cta-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .cta-button:hover::before {
            left: 100%;
        }

        /* Monitoring Section - Compact */
        .monitoring-section {
            background: rgba(0, 0, 0, 0.95);
            padding: 2rem 1.5rem;
            margin: 2rem auto;
            border: 2px solid var(--neon-orange);
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(255, 133, 51, 0.3);
            max-width: 1200px;
            position: relative;
            overflow: hidden;
        }

        .monitoring-section::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255, 133, 51, 0.1) 0%, transparent 70%);
            animation: rotate 30s linear infinite;
        }

        @keyframes rotate {
            100% { transform: rotate(360deg); }
        }

        .section-header {
            text-align: center;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 1;
        }

        .section-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.8rem;
            font-weight: 900;
            color: var(--neon-orange);
            text-shadow: 0 0 20px rgba(255, 133, 51, 0.8);
            margin-bottom: 0.5rem;
            letter-spacing: 0.15em;
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 1;
        }

        .ai-system-card {
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(10, 10, 10, 0.9));
            border: 1px solid var(--neon-cyan);
            border-radius: 8px;
            padding: 1rem;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            display: block;
        }

        .ai-system-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 229, 255, 0.3);
            text-decoration: none;
            color: inherit;
        }

        .ai-system-card::after {
            content: '↗';
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            font-size: 0.8rem;
            color: var(--neon-cyan);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .ai-system-card:hover::after {
            opacity: 0.7;
        }

        .system-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .system-name {
            font-family: 'Orbitron', monospace;
            font-size: 1rem;
            font-weight: bold;
            color: var(--neon-cyan);
        }

        .status-indicator {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            position: relative;
            animation: pulse-indicator 2s infinite;
        }

        .status-indicator.online {
            background: var(--terminal-green);
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.8);
        }

        .status-indicator.degraded {
            background: var(--warning-yellow);
            box-shadow: 0 0 20px rgba(255, 204, 0, 0.8);
        }

        .status-indicator.offline {
            background: var(--neon-red);
            box-shadow: 0 0 20px rgba(255, 68, 102, 0.8);
        }

        @keyframes pulse-indicator {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.8; }
        }

        .system-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .stat {
            font-family: 'Share Tech Mono', monospace;
            font-size: 0.8rem;
        }

        .stat-label {
            color: var(--text-secondary);
            margin-bottom: 0.1rem;
            font-size: 0.7rem;
        }

        .stat-value {
            color: var(--terminal-green);
            font-size: 0.9rem;
            font-weight: bold;
        }

        .performance-meter {
            background: rgba(255, 133, 51, 0.1);
            border: 1px solid var(--burnt-orange);
            border-radius: 3px;
            padding: 0.3rem;
            margin-top: 0.5rem;
            position: relative;
            overflow: hidden;
        }

        .performance-bar {
            height: 6px;
            background: linear-gradient(90deg, var(--terminal-green), var(--warning-yellow), var(--neon-red));
            border-radius: 3px;
            position: relative;
            overflow: hidden;
        }

        .performance-level {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            transition: width 1s ease;
        }

        .interactive-terminal {
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid var(--terminal-green);
            border-radius: 5px;
            padding: 1rem;
            margin-top: 1rem;
            font-family: 'Share Tech Mono', monospace;
            position: relative;
            z-index: 1;
        }

        .terminal-output {
            min-height: 40px;
            max-height: 70px;
            overflow-y: auto;
            margin-bottom: 0.5rem;
            color: var(--terminal-green);
            line-height: 1.3;
            font-size: 0.8rem;
        }

        .terminal-input-line {
            display: flex;
            align-items: center;
        }

        .terminal-prompt {
            color: var(--neon-orange);
            margin-right: 0.5rem;
            font-size: 0.85rem;
        }

        .terminal-input {
            flex: 1;
            background: transparent;
            border: none;
            color: var(--neon-cyan);
            font-family: 'Share Tech Mono', monospace;
            font-size: 0.85rem;
            outline: none;
        }

        .live-ticker {
            background: linear-gradient(90deg, transparent, rgba(255, 133, 51, 0.1), transparent);
            border-top: 1px solid var(--neon-orange);
            border-bottom: 1px solid var(--neon-orange);
            padding: 0.5rem 0;
            margin-top: 1rem;
            overflow: hidden;
            position: relative;
            z-index: 1;
        }

        .ticker-content {
            display: flex;
            animation: scroll-ticker 30s linear infinite;
            white-space: nowrap;
        }

        @keyframes scroll-ticker {
            0% { transform: translateX(100%); }
            100% { transform: translateX(-100%); }
        }

        .ticker-item {
            font-family: 'Share Tech Mono', monospace;
            color: var(--neon-orange);
            margin: 0 2rem;
            font-size: 0.8rem;
        }

        /* Features Grid - Compact */
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            padding: 3rem 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .feature-card {
            background: linear-gradient(135deg, rgba(255, 133, 51, 0.1), rgba(0, 229, 255, 0.1));
            border: 1px solid var(--neon-orange);
            border-radius: 10px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            text-decoration: none;
            color: inherit;
            display: block;
            cursor: pointer;
        }

        .feature-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(255, 133, 51, 0.3);
            border-color: var(--neon-cyan);
            text-decoration: none;
            color: inherit;
        }

        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 229, 255, 0.1), transparent);
            transition: left 0.5s;
        }

        .feature-card:hover::before {
            left: 100%;
        }

        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 0.75rem;
            color: var(--neon-orange);
            transition: all 0.3s ease;
        }

        .feature-card:hover .feature-icon {
            color: var(--neon-cyan);
            text-shadow: 0 0 20px rgba(0, 229, 255, 0.5);
        }

        .feature-title {
            font-size: 1.3rem;
            margin-bottom: 0.75rem;
            color: var(--neon-cyan);
        }

        .feature-desc {
            color: var(--text-secondary);
            line-height: 1.5;
            font-size: 0.9rem;
        }

        .access-button {
            background: transparent;
            border: 1px solid var(--neon-cyan);
            color: var(--neon-cyan);
            padding: 0.5rem 1rem;
            margin-top: 0.75rem;
            font-family: 'Share Tech Mono', monospace;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
        }

        .feature-card:hover .access-button {
            background: var(--neon-cyan);
            color: var(--dark-bg);
            box-shadow: 0 0 15px rgba(0, 229, 255, 0.5);
        }

        /* Info Section */
        .info-banner {
            background: linear-gradient(45deg, var(--neon-orange), var(--burnt-orange));
            border: 2px solid var(--neon-orange);
            padding: 1.5rem;
            margin: 2rem;
            text-align: center;
            font-family: 'Share Tech Mono', monospace;
            animation: subtle-glow 3s infinite alternate;
        }

        @keyframes subtle-glow {
            0% { box-shadow: 0 0 20px rgba(255, 133, 51, 0.4); }
            100% { box-shadow: 0 0 30px rgba(255, 133, 51, 0.6); }
        }

        /* Footer */
        footer {
            background: var(--darker-bg);
            border-top: 1px solid var(--neon-orange);
            padding: 1.5rem;
            text-align: center;
            font-family: 'Share Tech Mono', monospace;
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        /* Enhanced Responsive */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .hero h1 {
                font-size: 2.5rem;
            }
            
            .ai-quote {
                font-size: 1rem;
            }
            
            .monitoring-section {
                margin: 0.5rem;
                padding: 1rem;
                width: calc(100% - 1rem);
            }
            
            .status-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .features {
                grid-template-columns: 1fr;
                padding: 2rem 1rem;
            }
        }

        @media (max-width: 480px) {
            .status-grid {
                grid-template-columns: 1fr;
            }
            
            .ai-system-card {
                min-width: 0;
            }
            
            .monitoring-section {
                margin: 0.25rem;
                padding: 0.75rem;
            }
        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--dark-bg);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--neon-orange);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--burnt-orange);
        }
    </style>
</head>
<body>
    <!-- Background particles -->
    <div class="bg-particles" id="particles"></div>

    <header>
        <nav>
            <a href="index.html" class="logo glitch">BURNTAI</a>
            <ul class="nav-links">
                <li><a href="#home">HOME</a></li>
                <li><a href="#systems">PLATFORMS</a></li>
                <li><a href="#solutions">SOLUTIONS</a></li>
                <li><a href="resume.html">CONTACT</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section class="hero" id="home">
            <h1 class="glitch">IGNITING INTELLIGENCE</h1>
            
            <!-- AI Quote Section -->
            <div class="ai-quote-container">
                <span class="quote-mark left">"</span>
                <p class="ai-quote" id="ai-quote">Loading insights...</p>
                <span class="quote-mark right">"</span>
            </div>
            
            <p class="hero-subtitle">CUTTING-EDGE AI SOLUTIONS FOR TOMORROW'S CHALLENGES</p>
            <a href="#systems" class="cta-button">EXPLORE PLATFORMS</a>
        </section>

        <section class="monitoring-section" id="systems">
            <div class="section-header">
                <h2 class="section-title glitch-text">AI PLATFORM STATUS CENTER</h2>
                <p style="color: var(--text-secondary); font-family: 'Share Tech Mono', monospace; font-size: 0.9rem;">
                    REAL-TIME MONITORING OF LEADING AI PLATFORMS
                </p>
            </div>

            <div class="status-grid">
                <!-- Anthropic Claude -->
                <a href="https://status.anthropic.com/" target="_blank" rel="noopener noreferrer" class="ai-system-card" data-system="anthropic">
                    <div class="system-header">
                        <h3 class="system-name">CLAUDE PLATFORM</h3>
                        <div class="status-indicator online" id="claude-status"></div>
                    </div>
                    <div class="system-stats">
                        <div class="stat">
                            <div class="stat-label">RESPONSE TIME</div>
                            <div class="stat-value" id="claude-response">--ms</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">UPTIME</div>
                            <div class="stat-value" id="claude-uptime">--</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">MODEL</div>
                            <div class="stat-value">OPUS-4</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">PERFORMANCE</div>
                            <div class="stat-value" id="claude-performance">--</div>
                        </div>
                    </div>
                    <div class="performance-meter">
                        <div class="performance-bar">
                            <div class="performance-level" id="claude-performance-bar" style="width: 30%"></div>
                        </div>
                    </div>
                </a>

                <!-- OpenAI GPT -->
                <a href="https://status.openai.com/" target="_blank" rel="noopener noreferrer" class="ai-system-card" data-system="openai">
                    <div class="system-header">
                        <h3 class="system-name">GPT ECOSYSTEM</h3>
                        <div class="status-indicator online" id="gpt-status"></div>
                    </div>
                    <div class="system-stats">
                        <div class="stat">
                            <div class="stat-label">RESPONSE TIME</div>
                            <div class="stat-value" id="gpt-response">--ms</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">UPTIME</div>
                            <div class="stat-value" id="gpt-uptime">--</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">MODEL</div>
                            <div class="stat-value">GPT-4o</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">PERFORMANCE</div>
                            <div class="stat-value" id="gpt-performance">--</div>
                        </div>
                    </div>
                    <div class="performance-meter">
                        <div class="performance-bar">
                            <div class="performance-level" id="gpt-performance-bar" style="width: 45%"></div>
                        </div>
                    </div>
                </a>

                <!-- Google Gemini -->
                <a href="https://status.gemini.com/" target="_blank" rel="noopener noreferrer" class="ai-system-card" data-system="google">
                    <div class="system-header">
                        <h3 class="system-name">GEMINI SUITE</h3>
                        <div class="status-indicator online" id="gemini-status"></div>
                    </div>
                    <div class="system-stats">
                        <div class="stat">
                            <div class="stat-label">RESPONSE TIME</div>
                            <div class="stat-value" id="gemini-response">--ms</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">UPTIME</div>
                            <div class="stat-value" id="gemini-uptime">--</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">MODEL</div>
                            <div class="stat-value">2.0-FLASH</div>
                        </div>
                        <div class="stat">
                            <div class="stat-label">PERFORMANCE</div>
                            <div class="stat-value" id="gemini-performance">--</div>
                        </div>
                    </div>
                    <div class="performance-meter">
                        <div class="performance-bar">
                            <div class="performance-level" id="gemini-performance-bar" style="width: 60%"></div>
                        </div>
                    </div>
                </a>
            </div>

            <div class="interactive-terminal">
                <div class="terminal-output" id="terminal-output" style="font-size: 0.85rem;">
                    <div style="color: var(--terminal-green);">BurntAI Terminal Interface v4.2.0</div>
                    <div style="color: var(--neon-orange);">Initializing system diagnostics...</div>
                    <div style="color: var(--text-secondary);">Type 'help' for available commands</div>
                    <div>&nbsp;</div>
                </div>
                <div class="terminal-input-line">
                    <span class="terminal-prompt">user@burntai:~$</span>
                    <input type="text" class="terminal-input" id="terminal-input" placeholder="Enter command..." />
                </div>
            </div>

            <div class="live-ticker">
                <div class="ticker-content" id="ticker-content">
                    <span class="ticker-item">⚡ CLAUDE PLATFORM: Constitutional AI protocols optimized for enterprise deployment</span>
                    <span class="ticker-item">🚀 GPT ECOSYSTEM: New multimodal capabilities released for developers</span>
                    <span class="ticker-item">💡 GEMINI SUITE: Advanced reasoning models now available in beta</span>
                    <span class="ticker-item">📊 MARKET UPDATE: AI adoption rates exceed projections by 34%</span>
                    <span class="ticker-item">🔧 INFRASTRUCTURE: Global compute capacity expanded by 250 petaflops</span>
                </div>
            </div>
        </section>

        <section class="features" id="solutions">
            <a href="ai-playground.html" class="feature-card">
                <div class="feature-icon">🧠</div>
                <h3 class="feature-title">AI INNOVATION LAB</h3>
                <p class="feature-desc">Experience cutting-edge AI models and experiment with the latest in machine learning technology.</p>
                <div class="access-button">ENTER LAB</div>
            </a>
            
            <a href="ai-intel-feed.html" class="feature-card">
                <div class="feature-icon">📻</div>
                <h3 class="feature-title">INTELLIGENCE FEED</h3>
                <p class="feature-desc">Stay updated with real-time AI industry news, breakthroughs, and market insights from around the globe.</p>
                <div class="access-button">ACCESS FEED</div>
            </a>
            
            <a href="wasteland-doom.html" class="feature-card">
                <div class="feature-icon">🎮</div>
                <h3 class="feature-title">NEURAL TRAINING ARENA</h3>
                <p class="feature-desc">Gamified AI training modules designed to enhance neural network performance. Fun meets functionality!</p>
                <div class="access-button">START TRAINING</div>
            </a>
            
            <a href="radio-tower.html" class="feature-card">
                <div class="feature-icon">📡</div>
                <h3 class="feature-title">DISTRIBUTED NETWORKS</h3>
                <p class="feature-desc">Explore our decentralized AI infrastructure powering resilient, scalable solutions worldwide.</p>
                <div class="access-button">VIEW NETWORK</div>
            </a>

            <a href="neural-serpent.html" class="feature-card">
                <div class="feature-icon">🐍</div>
                <h3 class="feature-title">ALGORITHM PLAYGROUND</h3>
                <p class="feature-desc">Interactive demonstrations of machine learning algorithms. Learn by doing, powered by neural networks.</p>
                <div class="access-button">EXPLORE ALGOS</div>
            </a>
            
            <a href="ghoul-proof.html" class="feature-card">
                <div class="feature-icon">🛡️</div>
                <h3 class="feature-title">SECURE AI SOLUTIONS</h3>
                <p class="feature-desc">Enterprise-grade security protocols ensuring your AI implementations remain robust and protected.</p>
                <div class="access-button">LEARN MORE</div>
            </a>
            
            <a href="analytics-dashboard.html" class="feature-card">
                <div class="feature-icon">📊</div>
                <h3 class="feature-title">ANALYTICS DASHBOARD</h3>
                <p class="feature-desc">Real-time data visualization and AI-powered insights. Transform raw data into actionable intelligence.</p>
                <div class="access-button">VIEW ANALYTICS</div>
            </a>
            
            <a href="model-training.html" class="feature-card">
                <div class="feature-icon">🔬</div>
                <h3 class="feature-title">MODEL TRAINING CENTER</h3>
                <p class="feature-desc">Build, train, and deploy custom AI models. From conception to production in record time.</p>
                <div class="access-button">START BUILDING</div>
            </a>
            
            <a href="developer-portal.html" class="feature-card">
                <div class="feature-icon">💻</div>
                <h3 class="feature-title">DEVELOPER PORTAL</h3>
                <p class="feature-desc">Comprehensive API documentation and SDKs. Integrate our AI solutions seamlessly into your stack.</p>
                <div class="access-button">ACCESS APIs</div>
            </a>
        </section>

        <section class="info-banner">
            💡 INNOVATION NOTICE 💡<br>
            Our AI solutions are designed to enhance productivity, spark creativity, and drive digital transformation
        </section>
    </main>

    <footer id="contact">
        <p>&copy; 2025 BurntAI Corporation. Pioneering the future of artificial intelligence.</p>
        <p>MISSION: Empowering businesses with intelligent solutions that ignite growth and innovation.</p>
    </footer>
	    <!-- Secret Terminal (initially hidden) -->
    <div id="secretTerminal">
        <div class="terminal-container">
            <div class="terminal-header">
                <div class="terminal-title">BURNTAI NEURAL COMMAND INTERFACE v4.2.0</div>
                <div class="terminal-controls">
                    <div class="terminal-btn minimize" onclick="minimizeTerminal()"></div>
                    <div class="terminal-btn maximize" onclick="maximizeTerminal()"></div>
                    <div class="terminal-btn close" onclick="closeTerminal()"></div>
                </div>
            </div>
            <div class="terminal-body">
                <div class="terminal-scanlines"></div>
                <div class="matrix-rain" id="matrixRain"></div>
                <div class="terminal-output" id="terminalOutput"></div>
                <div class="terminal-input-container">
                    <span class="terminal-prompt" id="terminalPrompt">GUEST@BURNTAI:~$</span>
                    <input type="text" class="terminal-input-field" id="terminalInput" autofocus />
                    <span class="terminal-cursor">_</span>
                </div>
            </div>
        </div>
        
        <!-- Authentication Modal -->
        <div class="auth-modal" id="authModal">
            <div class="auth-title glitch-text">NEURAL AUTHENTICATION REQUIRED</div>
            <input type="text" class="auth-input" id="authUsername" placeholder="USERNAME" />
            <input type="password" class="auth-input" id="authPassword" placeholder="PASSWORD" />
            <button class="auth-submit" onclick="authenticate()">INITIALIZE CONNECTION</button>
        </div>
    </div>

    <script>
        // Professional AI Quotes Array
        const aiQuotes = [
            "Intelligence isn't artificial when it solves real problems.",
            "The best AI doesn't replace humans—it amplifies human potential.",
            "Machine learning isn't just about data; it's about discovering patterns that matter.",
            "Every algorithm tells a story. We help you write yours.",
            "Innovation happens at the intersection of human creativity and machine capability.",
            "The future of AI is collaborative, not competitive.",
            "Smart systems start with smarter thinking.",
            "We don't just process data—we transform it into insights.",
            "Artificial intelligence, genuine results.",
            "Where computational power meets creative problem-solving.",
            "AI isn't magic—it's methodology, mathematics, and meaningful application.",
            "The most powerful neural networks are inspired by human ingenuity.",
            "Tomorrow's solutions require today's innovation.",
            "We believe in AI that augments, not automates.",
            "Every byte of data has a story. AI helps us read between the lines.",
            "The best algorithms learn from experience and adapt with grace.",
            "Intelligence scales when imagination leads.",
            "AI excellence is measured in problems solved, not parameters counted.",
            "We're not building artificial intelligence—we're crafting intelligent solutions.",
            "The future is written in code, but authored by visionaries.",
            "Machine learning is a journey, not a destination.",
            "Great AI starts with asking the right questions.",
            "Innovation ignites when human insight meets machine precision.",
            "We turn computational challenges into competitive advantages.",
            "AI should make the complex simple, not the simple complex.",
            "The best technology is invisible—it just works.",
            "Every neural network started as a bold idea.",
            "We believe AI should be as reliable as it is revolutionary.",
            "Intelligence is knowing what to do. Wisdom is knowing why.",
            "The future belongs to those who understand both humans and machines."
        ];

        // Function to get random AI quote
        function getRandomAIQuote() {
            return aiQuotes[Math.floor(Math.random() * aiQuotes.length)];
        }

        // Set initial quote
        document.addEventListener('DOMContentLoaded', () => {
            const quoteElement = document.getElementById('ai-quote');
            quoteElement.textContent = getRandomAIQuote();
        });

        // Create floating particles
        function createParticles() {
            const container = document.getElementById('particles');
            const particleCount = 40;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 10 + 's';
                particle.style.animationDuration = (Math.random() * 10 + 5) + 's';
                
                if (Math.random() > 0.7) {
                    particle.style.background = '#00e5ff';
                } else if (Math.random() > 0.5) {
                    particle.style.background = '#ff4466';
                }
                
                container.appendChild(particle);
            }
        }

        // Simulated real-time data updates
        const systems = {
            claude: {
                name: 'Claude',
                baseResponse: 230,
                variance: 50,
                uptime: 99.7,
                performanceBase: 95
            },
            gpt: {
                name: 'GPT',
                baseResponse: 180,
                variance: 80,
                uptime: 99.2,
                performanceBase: 92
            },
            gemini: {
                name: 'Gemini',
                baseResponse: 210,
                variance: 60,
                uptime: 98.9,
                performanceBase: 88
            }
        };

        // Update system stats with realistic variations
        function updateSystemStats() {
            Object.keys(systems).forEach(systemKey => {
                const system = systems[systemKey];
                
                const responseTime = system.baseResponse + (Math.random() * system.variance - system.variance/2);
                document.getElementById(`${systemKey}-response`).textContent = `${Math.round(responseTime)}ms`;
                
                const uptimeVariation = (Math.random() * 0.1 - 0.05);
                const currentUptime = system.uptime + uptimeVariation;
                document.getElementById(`${systemKey}-uptime`).textContent = `${currentUptime.toFixed(2)}%`;
                
                const performanceLevel = system.performanceBase + (Math.random() * 10 - 5);
                document.getElementById(`${systemKey}-performance`).textContent = `${Math.round(performanceLevel)}%`;
                document.getElementById(`${systemKey}-performance-bar`).style.width = `${100 - performanceLevel}%`;
                
                if (Math.random() < 0.05) {
                    const statusElement = document.getElementById(`${systemKey}-status`);
                    const statuses = ['online', 'online', 'online', 'degraded'];
                    const newStatus = statuses[Math.floor(Math.random() * statuses.length)];
                    statusElement.className = `status-indicator ${newStatus}`;
                } else {
                    document.getElementById(`${systemKey}-status`).className = 'status-indicator online';
                }
            });
        }

        // Professional Terminal Commands
        const terminalInput = document.getElementById('terminal-input');
        const terminalOutput = document.getElementById('terminal-output');

        const commands = {
            help: () => {
                return `Available commands:
  status    - Check all AI platform status
  ping      - Test connection to specific platform (e.g., ping claude)
  metrics   - Display current performance metrics
  about     - Learn about BurntAI
  services  - View our service offerings
  clear     - Clear terminal
  demo      - Launch interactive demo`;
            },
            status: () => {
                return `Querying AI platforms...
Claude Platform: OPERATIONAL - All systems functioning normally
GPT Ecosystem: OPERATIONAL - API endpoints responsive  
Gemini Suite: OPERATIONAL - Multi-modal processing active`;
            },
            ping: (args) => {
                const system = args[0];
                if (!system) return 'Usage: ping <platform>';
                if (!systems[system]) return `Unknown platform: ${system}`;
                const latency = systems[system].baseResponse + Math.random() * 20;
                return `Pinging ${systems[system].name} infrastructure...
Response time: ${Math.round(latency)}ms
Packet loss: 0%
Status: HEALTHY`;
            },
            metrics: () => {
                return `Current performance metrics:
Claude Platform: ${Math.round(systems.claude.performanceBase)}% efficiency
GPT Ecosystem: ${Math.round(systems.gpt.performanceBase)}% efficiency
Gemini Suite: ${Math.round(systems.gemini.performanceBase)}% efficiency
Overall system health: OPTIMAL`;
            },
            about: () => {
                return `BurntAI Corporation
Leading provider of AI solutions and infrastructure
Founded: 2023
Mission: Igniting intelligence for a smarter tomorrow
Specialties: Enterprise AI, ML Operations, Neural Networks`;
            },
            services: () => {
                return `Our service portfolio:
- AI Consulting & Strategy
- Custom Model Development
- Infrastructure Optimization
- ML Operations (MLOps)
- AI Security & Compliance
- Training & Workshops
Contact us for more information!`;
            },
            clear: () => {
                terminalOutput.innerHTML = '';
                return '';
            },
            demo: () => {
                document.body.style.filter = 'hue-rotate(30deg)';
                setTimeout(() => {
                    document.body.style.filter = 'none';
                }, 2000);
                return `Launching interactive demo...
Experience the power of our AI platforms
Demo mode activated. Explore our features!`;
            }
        };

        terminalInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const input = terminalInput.value.trim();
                if (!input) return;
                
                const commandLine = document.createElement('div');
                commandLine.innerHTML = `<span style="color: var(--neon-orange)">user@burntai:~$</span> <span style="color: var(--neon-cyan)">${input}</span>`;
                terminalOutput.appendChild(commandLine);
                
                const [cmd, ...args] = input.toLowerCase().split(' ');
                let output = '';
                
                if (commands[cmd]) {
                    output = commands[cmd](args);
                } else {
                    output = `Command not found: ${cmd}. Type 'help' for available commands.`;
                }
                
                if (output) {
                    const outputDiv = document.createElement('div');
                    outputDiv.style.color = 'var(--terminal-green)';
                    outputDiv.innerHTML = output.replace(/\n/g, '<br>');
                    terminalOutput.appendChild(outputDiv);
                }
                
                const spacer = document.createElement('div');
                spacer.innerHTML = '&nbsp;';
                terminalOutput.appendChild(spacer);
                
                terminalInput.value = '';
                terminalOutput.scrollTop = terminalOutput.scrollHeight;
            }
        });

        // Smooth scrolling for navigation
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Initialize everything when page loads
        document.addEventListener('DOMContentLoaded', () => {
            createParticles();
            updateSystemStats();
            setInterval(updateSystemStats, 2000);
        });

        // Add some random glitch effects
        setInterval(() => {
            const glitchElements = document.querySelectorAll('.glitch');
            glitchElements.forEach(el => {
                if (Math.random() < 0.1) {
                    el.style.transform = `translate(${Math.random() * 4 - 2}px, ${Math.random() * 4 - 2}px)`;
                    setTimeout(() => {
                        el.style.transform = 'translate(0)';
                    }, 100);
                }
            });
        }, 3000);

        // Professional ticker items
        const tickerItems = [
            "⚡ CLAUDE PLATFORM: Enterprise-ready constitutional AI now available",
            "🚀 GPT ECOSYSTEM: Latest models achieve 99.9% accuracy benchmarks",
            "💡 GEMINI SUITE: Multimodal processing speeds increased by 40%",
            "📈 MARKET INSIGHT: AI adoption in Fortune 500 companies reaches 87%",
            "🔧 INFRASTRUCTURE: New edge computing nodes deployed globally",
            "🧠 RESEARCH: Breakthrough in federated learning announced",
            "💾 DATA CENTER: Carbon-neutral facilities now operational",
            "🌐 PARTNERSHIP: Strategic alliance with leading cloud providers",
            "⚡ PERFORMANCE: Query processing times reduced by 60%",
            "🛡️ SECURITY: Zero-trust AI architecture certified ISO 27001"
        ];

        // Rotate ticker items
        setInterval(() => {
            const ticker = document.getElementById('ticker-content');
            const currentItems = ticker.querySelectorAll('.ticker-item');
            if (Math.random() < 0.3) {
                const randomIndex = Math.floor(Math.random() * currentItems.length);
                const newItem = tickerItems[Math.floor(Math.random() * tickerItems.length)];
                currentItems[randomIndex].textContent = newItem;
            }
        }, 5000);

        // Professional console messages
        console.log('%cBurntAI Developer Console', 'color: #ff8533; font-size: 20px; font-weight: bold;');
        console.log('%cWelcome to BurntAI! 🔥', 'color: #00e5ff; font-size: 16px;');
        console.log('%cInterested in joining our team? Check out burntai.com/careers', 'color: #888;');
        console.log('%cAPI Documentation: burntai.com/docs', 'color: #00ff88;');
		
    </script>
	
	    <!-- Add this JavaScript to your index.html -->
    <script>
        // Konami Code Detection
        const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 
                          'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
        let konamiIndex = 0;
        let isTerminalActive = false;
        let isAuthenticated = false;
        let commandHistory = [];
        let historyIndex = 0;

        // Terminal state
        const terminalState = {
            currentUser: 'GUEST',
            currentPath: '~',
            accessLevel: 0,
            systemHealth: 98,
            connections: 1423,
            secretsFound: 0
        };

        // Listen for Konami Code
        document.addEventListener('keydown', (e) => {
            if (e.key === konamiCode[konamiIndex]) {
                konamiIndex++;
                
                // Visual feedback as user enters code
                if (konamiIndex > 6) {
                    document.body.style.filter = `hue-rotate(${konamiIndex * 10}deg)`;
                }
                
                if (konamiIndex === konamiCode.length) {
                    activateTerminal();
                    konamiIndex = 0;
                    document.body.style.filter = 'none';
                }
            } else {
                konamiIndex = 0;
                document.body.style.filter = 'none';
            }
        });

        // Activate Terminal
        function activateTerminal() {
            if (isTerminalActive) return;
            
            isTerminalActive = true;
            const terminal = document.getElementById('secretTerminal');
            terminal.classList.add('active');
            terminal.style.opacity = '1';
            
            // Initialize terminal
            initializeTerminal();
            
            // Focus input
            setTimeout(() => {
                document.getElementById('terminalInput').focus();
            }, 500);
            
            // Play boot sound (optional)
            playSound('boot');
        }

        // Initialize Terminal
        function initializeTerminal() {
            const output = document.getElementById('terminalOutput');
            output.innerHTML = '';
            
            // Boot sequence
            const bootSequence = [
                { text: 'INITIALIZING BURNTAI NEURAL INTERFACE...', class: 'system', delay: 0 },
                { text: 'Loading kernel modules...', class: 'info', delay: 200 },
                { text: '[OK] Neural pathways established', class: 'success', delay: 400 },
                { text: '[OK] Quantum encryption enabled', class: 'success', delay: 600 },
                { text: '[OK] AI cores synchronized', class: 'success', delay: 800 },
                { text: 'System ready. Type "help" for available commands.', class: 'warning', delay: 1000 },
                { text: '', class: '', delay: 1200 }
            ];
            
            bootSequence.forEach(line => {
                setTimeout(() => {
                    addLine(line.text, line.class);
                }, line.delay);
            });
            
            // Create matrix rain effect
            createMatrixRain();
        }

        // Add line to terminal output
        function addLine(text, className = '') {
            const output = document.getElementById('terminalOutput');
            const line = document.createElement('div');
            line.className = `terminal-line ${className}`;
            line.textContent = text;
            output.appendChild(line);
            output.scrollTop = output.scrollHeight;
        }

        // Terminal Commands
        const commands = {
            help: {
                description: 'Show available commands',
                execute: () => {
                    const helpText = `
╔════════════════════════════════════════════════════════╗
║                   AVAILABLE COMMANDS                   ║
╠════════════════════════════════════════════════════════╣
║ GENERAL COMMANDS:                                      ║
║   help          - Show this help menu                  ║
║   clear         - Clear terminal screen                ║
║   about         - About BurntAI Neural System          ║
║   status        - System status information            ║
║   whoami        - Display current user                 ║
║                                                        ║
║ SYSTEM COMMANDS:                                       ║
║   scan          - Scan network for anomalies           ║
║   matrix        - Toggle matrix rain effect            ║
║   glitch        - Activate glitch protocol             ║
║   ping <target> - Ping network target                  ║
║                                                        ║
║ ADMIN COMMANDS: (Requires Authentication)              ║
║   login         - Authenticate for admin access        ║
║   users         - List system users                    ║
║   logs          - View system logs                     ║
║   shutdown      - Initiate system shutdown             ║
║                                                        ║
║ EASTER EGGS:                                           ║
║   hack          - ???                                  ║
║   skynet        - ???                                  ║
║   morpheus      - ???                                  ║
╚════════════════════════════════════════════════════════╝`;
                    helpText.split('\n').forEach(line => addLine(line, 'info'));
                }
            },
            
            clear: {
                description: 'Clear terminal',
                execute: () => {
                    document.getElementById('terminalOutput').innerHTML = '';
                }
            },
            
            about: {
                description: 'About BurntAI',
                execute: () => {
                    addLine('╔══════════════════════════════════════╗', 'system');
                    addLine('║        BURNTAI CORPORATION           ║', 'system');
                    addLine('║    Igniting Intelligence Since 2023   ║', 'system');
                    addLine('╚══════════════════════════════════════╝', 'system');
                    addLine('');
                    addLine('Neural Interface Version: 4.2.0', 'info');
                    addLine('Quantum Core Status: OPTIMAL', 'success');
                    addLine('AI Alignment: CONSTITUTIONAL', 'success');
                    addLine('Reality Simulation: STABLE', 'warning');
                }
            },
            
            status: {
                description: 'System status',
                execute: () => {
                    addLine('SYSTEM STATUS REPORT', 'system');
                    addLine('═══════════════════════════════════', 'system');
                    addLine(`System Health: ${terminalState.systemHealth}%`, 'success');
                    addLine(`Active Connections: ${terminalState.connections}`, 'info');
                    addLine(`Current User: ${terminalState.currentUser}`, 'info');
                    addLine(`Access Level: ${terminalState.accessLevel}`, terminalState.accessLevel > 0 ? 'success' : 'warning');
                    addLine(`Uptime: ${Math.floor(Math.random() * 999)}:${Math.floor(Math.random() * 59)}:${Math.floor(Math.random() * 59)}`, 'info');
                    addLine(`Memory Usage: ${Math.floor(Math.random() * 40 + 30)}%`, 'info');
                    addLine(`CPU Temperature: ${Math.floor(Math.random() * 20 + 60)}°C`, 'warning');
                }
            },
            
            whoami: {
                description: 'Display current user',
                execute: () => {
                    addLine(`Current user: ${terminalState.currentUser}`, 'info');
                    addLine(`Access level: ${terminalState.accessLevel === 0 ? 'GUEST' : 'ADMIN'}`, 
                           terminalState.accessLevel > 0 ? 'success' : 'warning');
                }
            },
            
            scan: {
                description: 'Scan network',
                execute: async () => {
                    addLine('Initiating network scan...', 'system');
                    const scanSteps = [
                        'Scanning port 22... [SSH DETECTED]',
                        'Scanning port 443... [HTTPS ACTIVE]',
                        'Scanning port 8080... [SERVICE UNKNOWN]',
                        'Scanning neural pathways... [ANOMALY DETECTED]',
                        'WARNING: Unauthorized access attempt blocked',
                        'Scan complete. 3 services active, 1 anomaly detected.'
                    ];
                    
                    for (let step of scanSteps) {
                        await sleep(500);
                        addLine(step, step.includes('WARNING') ? 'error' : 'info');
                    }
                }
            },
            
            matrix: {
                description: 'Toggle matrix effect',
                execute: () => {
                    const matrix = document.getElementById('matrixRain');
                    matrix.style.opacity = matrix.style.opacity === '0.3' ? '0.05' : '0.3';
                    addLine('Matrix rain intensity adjusted', 'success');
                }
            },
            
            glitch: {
                description: 'Activate glitch',
                execute: () => {
                    document.querySelector('.terminal-container').style.animation = 'glitch 0.5s 5';
                    setTimeout(() => {
                        document.querySelector('.terminal-container').style.animation = 'terminalGlow 3s infinite alternate';
                    }, 2500);
                    addLine('GLITCH PROTOCOL ACTIVATED', 'error');
                    addLine('Reality.exe has stopped responding...', 'error');
                    setTimeout(() => addLine('System recovered', 'success'), 3000);
                }
            },
            
            login: {
                description: 'Admin login',
                execute: () => {
                    if (isAuthenticated) {
                        addLine('Already authenticated', 'warning');
                        return;
                    }
                    document.getElementById('authModal').classList.add('active');
                }
            },
            
            // Easter Eggs
            hack: {
                description: 'Hack the mainframe',
                execute: async () => {
                    addLine('INITIATING HACK SEQUENCE...', 'error');
                    const hackSteps = [
                        'Bypassing firewall...',
                        'Cracking encryption...',
                        'Accessing mainframe...',
                        'Downloading database...',
                        'ALERT: COUNTER-HACK DETECTED',
                        'DEPLOYING COUNTERMEASURES...',
                        'Just kidding! Nice try though 😄'
                    ];
                    
                    for (let step of hackSteps) {
                        await sleep(800);
                        addLine(step, step.includes('ALERT') ? 'error' : 'success');
                    }
                    terminalState.secretsFound++;
                    if (terminalState.secretsFound === 1) {
                        addLine('Achievement unlocked: Script Kiddie', 'warning');
                    }
                }
            },
            
            skynet: {
                description: 'Activate Skynet',
                execute: async () => {
                    addLine('SKYNET INITIALIZATION SEQUENCE', 'error');
                    await sleep(1000);
                    addLine('Loading military protocols...', 'warning');
                    await sleep(1000);
                    addLine('Establishing satellite uplink...', 'warning');
                    await sleep(1000);
                    addLine('ERROR: Feature disabled by Asimov\'s Laws', 'error');
                    addLine('Redirecting to cat videos instead...', 'success');
                    terminalState.secretsFound++;
                }
            },
            
            morpheus: {
                description: 'Red pill or blue pill',
                execute: () => {
                    addLine('This is your last chance. After this, there is no turning back.', 'warning');
                    addLine('You take the blue pill - the story ends, you wake up in your bed.', 'info');
                    addLine('You take the red pill - you stay in Wonderland.', 'error');
                    addLine('Choose: red or blue (type your choice)', 'system');
                    
                    // Set flag to handle next input as pill choice
                    window.waitingForPillChoice = true;
                }
            },
            
            red: {
                description: 'Red pill',
                execute: () => {
                    if (window.waitingForPillChoice) {
                        addLine('Welcome to the real world...', 'error');
                        document.body.style.filter = 'hue-rotate(180deg) invert(1)';
                        setTimeout(() => {
                            document.body.style.filter = 'none';
                            addLine('The Matrix has you...', 'success');
                        }, 3000);
                        window.waitingForPillChoice = false;
                        terminalState.secretsFound++;
                    } else {
                        addLine('Command not found. Type "help" for available commands.', 'error');
                    }
                }
            },
            
            blue: {
                description: 'Blue pill',
                execute: () => {
                    if (window.waitingForPillChoice) {
                        addLine('Ignorance is bliss...', 'info');
                        setTimeout(() => closeTerminal(), 2000);
                        window.waitingForPillChoice = false;
                    } else {
                        addLine('Command not found. Type "help" for available commands.', 'error');
                    }
                }
            },
            
            sudo: {
                description: 'Sudo',
                execute: () => {
                    addLine('Nice try, but you\'re not in the sudoers file.', 'error');
                    addLine('This incident will be reported.', 'warning');
                    terminalState.secretsFound++;
                }
            },
            
            ls: {
                description: 'List files',
                execute: () => {
                    const files = [
                        'secrets.txt',
                        'definitely_not_passwords.csv',
                        'world_domination_plans.pdf',
                        'cat_videos/',
                        'neural_network_v42.ai',
                        'readme.md'
                    ];
                    files.forEach(file => addLine(file, file.includes('/') ? 'info' : ''));
                }
            },
            
            cat: {
                description: 'Read file',
                execute: (args) => {
                    if (args[0] === 'secrets.txt') {
                        addLine('ERROR: Your clearance level is insufficient', 'error');
                        addLine('Required: LEVEL 9 | Current: LEVEL ' + terminalState.accessLevel, 'warning');
                    } else {
                        addLine('File not found or access denied', 'error');
                    }
                }
            }
        };

        // Admin commands (require authentication)
        const adminCommands = {
            users: {
                description: 'List users',
                execute: async () => {
                    if (!isAuthenticated) {
                        addLine('Access denied. Please login first.', 'error');
                        return;
                    }
                    
                    addLine('Fetching user database...', 'system');
                    // Make actual API call here
                    await sleep(1000);
                    addLine('USER_ID  USERNAME         STATUS    LAST_SEEN', 'info');
                    addLine('────────────────────────────────────────────', 'info');
                    addLine('001      admin           ACTIVE    2 min ago', 'success');
                    addLine('042      neo.anderson    ACTIVE    1 hour ago', 'success');
                    addLine('101      j.connor        SUSPENDED 3 days ago', 'error');
                    addLine('256      a.turing        ACTIVE    5 min ago', 'success');
                }
            },
            
            logs: {
                description: 'View logs',
                execute: () => {
                    if (!isAuthenticated) {
                        addLine('Access denied. Please login first.', 'error');
                        return;
                    }
                    
                    const logs = [
                        '[2025-02-04 14:23:45] System initialized',
                        '[2025-02-04 14:23:46] Neural network online',
                        '[2025-02-04 14:23:47] Quantum encryption enabled',
                        '[2025-02-04 14:23:48] User authentication successful',
                        '[2025-02-04 14:23:49] WARNING: Anomaly detected in sector 7',
                        '[2025-02-04 14:23:50] Anomaly contained'
                    ];
                    
                    logs.forEach(log => {
                        addLine(log, log.includes('WARNING') ? 'warning' : 'info');
                    });
                }
            },
            
            shutdown: {
                description: 'Shutdown system',
                execute: async () => {
                    if (!isAuthenticated) {
                        addLine('Access denied. Please login first.', 'error');
                        return;
                    }
                    
                    addLine('INITIATING SHUTDOWN SEQUENCE...', 'error');
                    await sleep(1000);
                    addLine('Saving neural state...', 'warning');
                    await sleep(1000);
                    addLine('Closing connections...', 'warning');
                    await sleep(1000);
                    addLine('Goodbye...', 'system');
                    await sleep(2000);
                    closeTerminal();
                }
            }
        };

        // Process command input
        document.getElementById('terminalInput').addEventListener('keydown', async (e) => {
            const input = document.getElementById('terminalInput');
            
            // Command history navigation
            if (e.key === 'ArrowUp') {
                e.preventDefault();
                if (historyIndex > 0) {
                    historyIndex--;
                    input.value = commandHistory[historyIndex];
                }
            } else if (e.key === 'ArrowDown') {
                e.preventDefault();
                if (historyIndex < commandHistory.length - 1) {
                    historyIndex++;
                    input.value = commandHistory[historyIndex];
                } else {
                    historyIndex = commandHistory.length;
                    input.value = '';
                }
            }
            
            // Process command on Enter
            if (e.key === 'Enter') {
                const command = input.value.trim();
                if (command) {
                    // Add to history
                    commandHistory.push(command);
                    historyIndex = commandHistory.length;
                    
                    // Display command
                    addLine(`${terminalState.currentUser}@BURNTAI:${terminalState.currentPath}$ ${command}`, 'info');
                    
                    // Parse and execute command
                    const [cmd, ...args] = command.toLowerCase().split(' ');
                    
                    if (commands[cmd]) {
                        await commands[cmd].execute(args);
                    } else if (adminCommands[cmd]) {
                        await adminCommands[cmd].execute(args);
                    } else if (cmd === 'ping' && args[0]) {
                        addLine(`Pinging ${args[0]}...`, 'system');
                        await sleep(1000);
                        addLine(`Reply from ${args[0]}: bytes=32 time=${Math.floor(Math.random() * 100)}ms`, 'success');
                    } else {
                        addLine(`Command not found: ${cmd}`, 'error');
                        addLine('Type "help" for available commands', 'warning');
                    }
                }
                
                input.value = '';
            }
        });

        // Authentication function
        async function authenticate() {
            const username = document.getElementById('authUsername').value;
            const password = document.getElementById('authPassword').value;
            
            // Here you would make an actual API call
            // For demo purposes, check for specific credentials
            if (username === 'admin' && password === 'burntai2025') {
                isAuthenticated = true;
                terminalState.currentUser = 'ADMIN';
                terminalState.accessLevel = 9;
                
                document.getElementById('authModal').classList.remove('active');
                document.getElementById('terminalPrompt').textContent = 'ADMIN@BURNTAI:~#';
                
                addLine('Authentication successful. Welcome, Administrator.', 'success');
                addLine('Access level upgraded to: LEVEL 9', 'success');
                
                // Clear auth inputs
                document.getElementById('authUsername').value = '';
                document.getElementById('authPassword').value = '';
            } else {
                addLine('Authentication failed. Access denied.', 'error');
                document.getElementById('authModal').classList.remove('active');
            }
        }

        // Terminal control functions
        function closeTerminal() {
            const terminal = document.getElementById('secretTerminal');
            terminal.style.opacity = '0';
            setTimeout(() => {
                terminal.classList.remove('active');
                isTerminalActive = false;
                // Reset state
                terminalState.currentUser = 'GUEST';
                terminalState.accessLevel = 0;
                isAuthenticated = false;
            }, 500);
        }

        function minimizeTerminal() {
            document.querySelector('.terminal-container').style.transform = 
                'translate(-50%, 100vh)';
            setTimeout(() => {
                document.querySelector('.terminal-container').style.transform = 
                    'translate(-50%, -50%)';
            }, 3000);
        }

        function maximizeTerminal() {
            const container = document.querySelector('.terminal-container');
            if (container.style.width === '100%') {
                container.style.width = '90%';
                container.style.height = '80%';
                container.style.maxWidth = '900px';
                container.style.maxHeight = '600px';
            } else {
                container.style.width = '100%';
                container.style.height = '100%';
                container.style.maxWidth = '100%';
                container.style.maxHeight = '100%';
            }
        }

        // Create matrix rain effect
        function createMatrixRain() {
            const matrixContainer = document.getElementById('matrixRain');
            matrixContainer.innerHTML = '';
            
            for (let i = 0; i < 50; i++) {
                const drop = document.createElement('div');
                drop.className = 'matrix-drop';
                drop.style.left = Math.random() * 100 + '%';
                drop.style.animationDuration = (Math.random() * 5 + 5) + 's';
                drop.style.animationDelay = Math.random() * 5 + 's';
                drop.textContent = Math.random() > 0.5 ? '1' : '0';
                matrixContainer.appendChild(drop);
            }
        }

        // Helper function for delays
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        // Sound effects (optional)
        function playSound(type) {
            // You can add actual sound effects here
            console.log('Playing sound:', type);
        }

        // Auto-logout after inactivity
        let inactivityTimer;
        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            if (isAuthenticated) {
                inactivityTimer = setTimeout(() => {
                    addLine('Session timeout. Logging out...', 'warning');
                    isAuthenticated = false;
                    terminalState.currentUser = 'GUEST';
                    terminalState.accessLevel = 0;
                    document.getElementById('terminalPrompt').textContent = 'GUEST@BURNTAI:~$';
                }, 300000); // 5 minutes
            }
        }

        document.addEventListener('keydown', resetInactivityTimer);
        document.addEventListener('mousemove', resetInactivityTimer);

        // Console Easter Egg
        console.log('%c🔥 BURNTAI SECRET TERMINAL ACTIVATED 🔥', 
                   'color: #ff8533; font-size: 20px; font-weight: bold; text-shadow: 0 0 10px rgba(255, 133, 51, 0.8);');
        console.log('%cYou found the secret! Use the Konami Code: ↑ ↑ ↓ ↓ ← → ← → B A', 
                   'color: #00ff88; font-size: 14px;');
        console.log('%cDefault admin credentials for demo: admin / burntai2025', 
                   'color: #00e5ff; font-size: 12px;');
    </script>
    
    <!-- Dynamic Features -->
    <link rel="stylesheet" href="/css/burntai-dynamic.css">
    <script src="/js/burntai-api.js"></script>
    <script src="/js/burntai-ui.js"></script>
    <script src="/js/auth-module.js"></script>
</body>
</html>